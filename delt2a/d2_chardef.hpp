#ifndef D2_CHARDEF_HPP
#define D2_CHARDEF_HPP

#include "d2_locale.hpp"

namespace d2
{
	template<Encoding Ed>
	struct Charset;

	template<>
	struct Charset<Encoding::Ascii>
	{
		static constexpr auto top_fix = true;
		static constexpr auto corners = false;
		static constexpr auto box_top_bar = '.';
        static constexpr auto box_top_drag_spot = ',';
		static constexpr auto box_tr_corner = '+';
		static constexpr auto box_tl_corner = '+';
		static constexpr auto box_br_corner = '+';
		static constexpr auto box_bl_corner = '+';
		static constexpr auto box_tr_corner_smooth = '+';
		static constexpr auto box_tl_corner_smooth = '+';
		static constexpr auto box_br_corner_smooth = '+';
		static constexpr auto box_bl_corner_smooth = '+';
        static constexpr auto box_tr_corner_rough = '+';
        static constexpr auto box_tl_corner_rough = '+';
        static constexpr auto box_br_corner_rough = '+';
        static constexpr auto box_bl_corner_rough = '+';
		static constexpr auto box_border_vertical = '|';
		static constexpr auto box_border_horizontal = '_';

		static constexpr auto checkbox_true = 'x';
		static constexpr auto checkbox_false = 'o';
		static constexpr auto switch_separator_horizontal = '-';
		static constexpr auto switch_separator_vertical = '|';
		static constexpr auto slider_horizontal = '-';
		static constexpr auto slider_vertical = '|';
		static constexpr auto slider_thumb_vertical = ' ';
		static constexpr auto slider_thumb_horizontal = ' ';
		static constexpr auto radio_checked = '*';
		static constexpr auto radio_unchecked = 'o';

		static constexpr auto arrow_up = '^';
		static constexpr auto arrow_down = 'v';
		static constexpr auto arrow_left = '<';
		static constexpr auto arrow_right = '>';

        static constexpr auto shade_transparent = ' ';
        static constexpr auto shade_opaque = ' ';
	};

	template<>
	struct Charset<Encoding::Unicode>
	{
		static constexpr auto top_fix = false;
		static constexpr auto corners = true;
        static constexpr auto box_top_bar = "‚ñÅ";
        static constexpr auto box_top_drag_spot = "‚ñÉ";
        static constexpr auto box_tr_corner_rough = "‚îê";
        static constexpr auto box_tl_corner_rough = "‚îå";
        static constexpr auto box_br_corner_rough = "‚îò";
        static constexpr auto box_bl_corner_rough = "‚îî";
        static constexpr auto box_tr_corner_smooth = "‚ïÆ";
        static constexpr auto box_tl_corner_smooth = "‚ï≠";
        static constexpr auto box_br_corner_smooth = "‚ïØ";
        static constexpr auto box_bl_corner_smooth = "‚ï∞";
        static constexpr auto box_tr_corner = box_tr_corner_smooth;
        static constexpr auto box_tl_corner = box_tl_corner_smooth;
        static constexpr auto box_br_corner = box_br_corner_smooth;
        static constexpr auto box_bl_corner = box_bl_corner_smooth;
        static constexpr auto box_border_vertical = "‚îÇ";
        static constexpr auto box_border_horizontal = "‚îÄ";

        static constexpr auto checkbox_true = "‚òë";
        static constexpr auto checkbox_false = "‚òê";
        static constexpr auto switch_separator_horizontal = "‚îÅ";
        static constexpr auto switch_separator_vertical = "‚îÉ";
        static constexpr auto slider_horizontal = "‚îÅ";
        static constexpr auto slider_vertical = "‚îÉ";
        static constexpr auto slider_thumb_vertical = "‚ñà";
        static constexpr auto slider_thumb_horizontal = "‚ñà";
        static constexpr auto radio_checked = "‚óâ";
        static constexpr auto radio_unchecked = "‚óØ";

        static constexpr auto arrow_up = "‚Üë";
        static constexpr auto arrow_down = "‚Üì";
        static constexpr auto arrow_left = "‚Üê";
        static constexpr auto arrow_right = "‚Üí";

        static constexpr auto shade_transparent = "‚ñë";
        static constexpr auto shade_opaque = "‚ñà";

        struct icon
        {
            static constexpr auto arrow_left = "‚Üê";
            static constexpr auto arrow_right = "‚Üí";
            static constexpr auto arrow_up = "‚Üë";
            static constexpr auto arrow_down = "‚Üì";

            static constexpr auto play = "‚ñ∂";
            static constexpr auto pause = "‚è∏";
            static constexpr auto stop = "‚èπ";
            static constexpr auto record = "‚è∫";
            static constexpr auto next = "‚è≠";
            static constexpr auto previous = "‚èÆ";

            static constexpr auto checkbox_unchecked = "‚òê";
            static constexpr auto checkbox_checked  = "‚òë";
            static constexpr auto checkbox_crossed = "‚òí";
            static constexpr auto radio_on = "‚óâ";
            static constexpr auto radio_off = "‚óã";

            static constexpr auto info = "‚Ñπ";
            static constexpr auto warning = "‚ö†";
            static constexpr auto error = "‚ùå";
            static constexpr auto check = "‚úî";
            static constexpr auto cross = "‚úñ";
            static constexpr auto exclamation = "‚ùó";
            static constexpr auto question = "‚ùì";

            static constexpr auto gear = "‚öô";
            static constexpr auto wrench = "üîß";
            static constexpr auto hammer = "üî®";

            static constexpr auto document = "üìÑ";
            static constexpr auto folder = "üìÅ";
            static constexpr auto trash = "üóë";
            static constexpr auto scissors = "‚úÇ";

            static constexpr auto star_filled = "‚òÖ";
            static constexpr auto star_empty = "‚òÜ";
            static constexpr auto heart = "‚ù§";
            static constexpr auto heart_empty = "‚ô°";

            static constexpr auto envelope = "‚úâ";
            static constexpr auto phone = "‚òé";
        };

        enum Cell
        {
            TopLeft = 1 << 0, TopRight = 1 << 1,
            MidTopLeft = 1 << 2, MidTopRight = 1 << 3,
            MidBotLeft = 1 << 4, MidBotRight = 1 << 5,
            BotLeft = 1 << 6, BotRight = 1 << 7,
        };
        static auto cell(uint8_t mask) noexcept
        {
            const char32_t ch = 0x2800 + mask;
            return std::string(reinterpret_cast<const char*>(&ch), sizeof(ch));
        }
	};

	using charset = Charset<encoding>;
}

#endif // D2_CHARDEF_HPP
